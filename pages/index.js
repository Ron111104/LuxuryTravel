import { useState, useEffect, useRef } from "react";
import HeroNavbar from "@/components/HeroNavbar";
import RegularNavbar from "@/components/RegularNavbar";
import HeroSection from "@/components/Landing/HeroSection";
import MagicalMemories from "@/components/Landing/MagicalMemories";
import TailorMade from "@/components/Landing/TailorMade";
import ClientTestimonials from "@/components/Landing/ClientTestimonials";
import Footer from "@/components/Footer";
import AboutUs from "@/components/Landing/AboutUs";
import ChatWithUs from "@/components/ChatWithUs";
import GoToTopButton from "@/components/GoToTopButton";
import Cookies from "js-cookie";

export default function Home() {
Â  const heroRef = useRef(null);
Â  const bookingRef = useRef(null); // ðŸ‘ˆ NEW ref for booking section

Â  const [scrolledPastHero, setScrolledPastHero] = useState(false);
Â  const [showFloatingButtons, setShowFloatingButtons] = useState(false);
Â  const [showCookiePopup, setShowCookiePopup] = useState(false);
Â  const [showCookieSettings, setShowCookieSettings] = useState(false);
Â  const [cookiePreferences, setCookiePreferences] = useState({
Â  Â  essential: true,
Â  Â  analytics: false,
Â  Â  marketing: false,
Â  });

Â  useEffect(() => {
Â  Â  const cookieConsent = Cookies.get("cookieConsent");
Â  Â  if (!cookieConsent) {
Â  Â  Â  setShowCookiePopup(true);
Â  Â  } else {
Â  Â  Â  try {
Â  Â  Â  Â  const consentData = JSON.parse(cookieConsent);
Â  Â  Â  Â  setCookiePreferences(consentData);
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error parsing cookies:", error);
Â  Â  Â  Â  setShowCookiePopup(true);
Â  Â  Â  }
Â  Â  }
Â  }, []);

Â  useEffect(() => {
Â  Â  const handleScroll = () => {
Â  Â  Â  if (heroRef.current) {
Â  Â  Â  Â  const heroHeight = heroRef.current.getBoundingClientRect().bottom;
Â  Â  Â  Â  setScrolledPastHero(heroHeight < 0);
Â  Â  Â  }
Â  Â  Â  setShowFloatingButtons(window.scrollY > 300);
Â  Â  };

Â  Â  window.addEventListener("scroll", handleScroll);
Â  Â  return () => window.removeEventListener("scroll", handleScroll);
Â  }, []);

Â  const acceptAllCookies = () => {
Â  Â  Cookies.set(
Â  Â  Â  "cookieConsent",
Â  Â  Â  JSON.stringify({
Â  Â  Â  Â  essential: true,
Â  Â  Â  Â  analytics: true,
Â  Â  Â  Â  marketing: true,
Â  Â  Â  }),
Â  Â  Â  { expires: 30, path: "/" }
Â  Â  );
Â  Â  setShowCookiePopup(false);
Â  };

Â  const rejectCookies = () => {
Â  Â  Cookies.set(
Â  Â  Â  "cookieConsent",
Â  Â  Â  JSON.stringify({
Â  Â  Â  Â  essential: true,
Â  Â  Â  Â  analytics: false,
Â  Â  Â  Â  marketing: false,
Â  Â  Â  }),
Â  Â  Â  { expires: 30, path: "/" }
Â  Â  );
Â  Â  setShowCookiePopup(false);
Â  };

Â  const saveCookiePreferences = () => {
Â  Â  Cookies.set("cookieConsent", JSON.stringify(cookiePreferences), {
Â  Â  Â  expires: 30,
Â  Â  Â  path: "/",
Â  Â  });
Â  Â  setShowCookieSettings(false);
Â  Â  setShowCookiePopup(false);
Â  };

Â  return (
Â  Â  <div className="min-h-screen bg-white w-full overflow-hidden">
Â  Â  Â  <div className="max-w-screen-xl mx-auto">
Â  Â  Â  Â  {!scrolledPastHero ? <HeroNavbar /> : <RegularNavbar />}
Â  Â  Â  Â  <HeroSection heroRef={heroRef} bookingRef={bookingRef} />
Â  Â  Â  Â  <div className="px-4 sm:px-6 lg:px-8">
Â  Â  Â  Â  Â  <MagicalMemories />
Â  Â  Â  Â  Â  <TailorMade />
Â  Â  Â  Â  Â  <AboutUs />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* ðŸ”½ Booking Section target (replace with actual booking component) */}
Â  Â  Â  Â  <div ref={bookingRef} className="py-20 bg-gray-100 text-center">
Â  Â  Â  Â  Â  <h2 className="text-3xl font-bold text-[#613842] mb-4">Start Planning Your Journey</h2>
Â  Â  Â  Â  Â  <p className="text-gray-700 max-w-xl mx-auto">
Â  Â  Â  Â  Â  Â  This is where your next luxury experience begins. (Add your booking widget here)
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <ClientTestimonials />
Â  Â  Â  Â  <Footer />
Â  Â  Â  </div>

Â  Â  Â  {showFloatingButtons && (
Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  <ChatWithUs />
Â  Â  Â  Â  Â  <GoToTopButton />
Â  Â  Â  Â  </>
Â  Â  Â  )}

Â  Â  Â  {showCookiePopup && (
Â  Â  Â  Â  <div className="fixed bottom-4 left-4 right-4 sm:left-8 sm:right-8 p-4 bg-gray-900 text-white rounded-lg shadow-lg flex flex-col items-center text-center z-50">
Â  Â  Â  Â  Â  <p className="text-sm">
Â  Â  Â  Â  Â  Â  We use cookies to enhance your experience. Manage your preferences or read our{" "}
Â  Â  Â  Â  Â  Â  <a href="/privacy-policy" className="underline">Privacy Policy</a>.
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  <div className="mt-3 flex flex-wrap justify-center gap-2">
Â  Â  Â  Â  Â  Â  <button onClick={acceptAllCookies} className="bg-yellow-500 px-4 py-2 text-black rounded-lg">Accept Cookies</button>
Â  Â  Â  Â  Â  Â  <button onClick={() => setShowCookieSettings(true)} className="bg-gray-600 px-4 py-2 text-white rounded-lg">Change my preferences</button>
Â  Â  Â  Â  Â  Â  <button onClick={rejectCookies} className="bg-red-500 px-4 py-2 text-white rounded-lg">Reject Cookies</button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  )}

Â  Â  Â  {showCookieSettings && (
Â  Â  Â  Â  <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
Â  Â  Â  Â  Â  <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-sm sm:max-w-md">
Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-semibold mb-4">Manage Cookie Preferences</h2>
Â  Â  Â  Â  Â  Â  <div className="flex flex-col space-y-3">
Â  Â  Â  Â  Â  Â  Â  <label className="flex items-center">
Â  Â  Â  Â  Â  Â  Â  Â  <input type="checkbox" checked={cookiePreferences.essential} disabled className="mr-2" />
Â  Â  Â  Â  Â  Â  Â  Â  Essential Cookies (Required)
Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  <label className="flex items-center">
Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="checkbox"
Â  Â  Â  Â  Â  Â  Â  Â  Â  checked={cookiePreferences.analytics}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={() => setCookiePreferences(prev => ({ ...prev, analytics: !prev.analytics }))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="mr-2"
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Analytics Cookies
Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  <label className="flex items-center">
Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="checkbox"
Â  Â  Â  Â  Â  Â  Â  Â  Â  checked={cookiePreferences.marketing}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={() => setCookiePreferences(prev => ({ ...prev, marketing: !prev.marketing }))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="mr-2"
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Marketing Cookies
Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="mt-4 flex justify-end space-x-3">
Â  Â  Â  Â  Â  Â  Â  <button onClick={() => setShowCookieSettings(false)} className="bg-gray-400 px-4 py-2 text-black rounded-lg">Cancel</button>
Â  Â  Â  Â  Â  Â  Â  <button onClick={saveCookiePreferences} className="bg-blue-500 px-4 py-2 text-white rounded-lg">Save Preferences</button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  </div>
Â  );
}
